AWSTemplateFormatVersion: 2010-09-09
Description: lambda stack for all lambdas

Parameters:
  ProjectName:
    Type: String
    Description: The name of the project

  EnvironmentStage:
    Type: String
    AllowedValues:
      - prod

  SecretsArn:
    Type: String

  SQSStack:
    Type: String

Resources:
  ServerPipelineAlertLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ServerPipelineAlertLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  ServerPipelineAlertLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: ServerPipelineAlertLambda
    Properties:
      LogGroupName:
        Fn::Join:
          - '-'
          - - ServerPipelineAlertLambda
            - !Ref EnvironmentStage
            - logs
      RetentionInDays: 7

  ServerPipelineAlertLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async function (event) {
          try {
          const { time, detail } = JSON.parse(event.Records[0].Sns.Message);
          
          const webHookURL = process.env.SERVER_PIPELINE_WEBHOOK;
          const envStage = process.env.ENVIRONMENT_STAGE;
          
          if (!webHookURL || !envStage) {
              throw new Error("Webhook URL or Environment Stage is missing");
              }
          
          const utcTime = new Date(time);
          const koreaTime = new Date(utcTime.getTime() + (9 * 60 * 60 * 1000));
          const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', timeZoneName: 'short' };
          const koreaTimeFormatted = new Intl.DateTimeFormat('ko-KR', options).format(koreaTime);
          
          const content = `⛳️ **AWS CodePipeline Notification-${envStage}**\n\n**Execution Status: ${detail.state}**\n\n**Time:** ${koreaTimeFormatted}`;
          
          const response = await fetch(webHookURL, {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ content })
              });
          
              if (!response.ok) {
                throw new Error(`Webhook request failed with status: ${response.status}`);
              }
          
              return "Success";
              } catch (e) {
                console.error(e);
                throw e;
              }
            };  

      Role: !GetAtt [ ServerPipelineAlertLambdaRole, Arn ]
      Environment:
        Variables:
          ENVIRONMENT_STAGE: !Ref EnvironmentStage
          SERVER_PIPELINE_WEBHOOK:
            Fn::Sub:
              - '{{resolve:secretsmanager:${SecretsArn}:SecretString:SERVER_PIPELINE_WEBHOOK}}'
              - SecretName: !Ref SecretsArn

  WebPipelineAlertLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: WebPipelineAlertLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  WebPipelineAlertLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: WebPipelineAlertLambda
    Properties:
      LogGroupName:
        Fn::Join:
          - '-'
          - - WebPipelineAlertLambda
            - !Ref EnvironmentStage
            - logs
      RetentionInDays: 7

  WebPipelineAlertLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async function (event) {
          try {
          const { time, detail } = JSON.parse(event.Records[0].Sns.Message);

          const webHookURL = process.env.WEB_PIPELINE_WEBHOOK;
          const envStage = process.env.ENVIRONMENT_STAGE;

          if (!webHookURL || !envStage) {
              throw new Error("Webhook URL or Environment Stage is missing");
              }

          const utcTime = new Date(time);
          const koreaTime = new Date(utcTime.getTime() + (9 * 60 * 60 * 1000));
          const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', timeZoneName: 'short' };
          const koreaTimeFormatted = new Intl.DateTimeFormat('ko-KR', options).format(koreaTime);

          const content = `⛳️ **AWS CodePipeline Notification-${envStage}**\n\n**Execution Status: ${detail.state}**\n\n**Time:** ${koreaTimeFormatted}`;

          const response = await fetch(webHookURL, {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ content })
              });

              if (!response.ok) {
                throw new Error(`Webhook request failed with status: ${response.status}`);
              }

              return "Success";
              } catch (e) {
                console.error(e);
                throw e;
              }
            };  

      Role: !GetAtt [ WebPipelineAlertLambdaRole, Arn ]
      Environment:
        Variables:
          ENVIRONMENT_STAGE: !Ref EnvironmentStage
          WEB_PIPELINE_WEBHOOK:
            Fn::Sub:
              - '{{resolve:secretsmanager:${SecretsArn}:SecretString:WEB_PIPELINE_WEBHOOK}}'
              - SecretName: !Ref SecretsArn

  SQSPollingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "MyLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource:
                  - Fn::ImportValue:
                      Fn::Join:
                        - '-'
                        - - !Ref SQSStack
                          - OpenviduScalingQueueArn
              - Effect: "Allow"
                Action:
                  - "ec2:*"
                Resource:
                  - "*"

  # https://medium.com/@devrick84/node-js-%EA%B8%B0%EB%B0%98%EC%9C%BC%EB%A1%9C-sqs-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-2433677715d3
  SQSPollingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const {
              ReceiveMessageCommand,
              DeleteMessageCommand,
              SQSClient,
              DeleteMessageBatchCommand,
          } = require("@aws-sdk/client-sqs")
            
            exports.handler = async (event) => {
            const region = process.env.region
            const SQS_URL = process.env.SQS_URL
            // DynamoDB 클라이언트 생성
            const sqsClient = new SQSClient({region});
            
            const input = {
          AttributeNames: ["All"],
          MaxNumberOfMessages: 1,
          MessageAttributeNames: ["All"],
          QueueUrl: SQS_URL,
          WaitTimeSeconds: 0,
          VisibilityTimeout: 0,
          }
            
            const command = new ReceiveMessageCommand(input)
            
            const response = await sqsClient.send(command)
            
            if (!response.Messages) {
            console.log('no message!')
          } else {
            console.log(response.Messages[0].MessageAttributes)
          }
          };
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 5
      Role: !GetAtt [ SQSPollingLambdaRole, Arn ]
      Environment:
        Variables:
          region: !Ref AWS::Region
          SQS_URL:
            Fn::ImportValue:
              Fn::Join:
                - '-'
                - - !Ref SQSStack
                  - OpenviduScalingQueue

Outputs:
  ServerPipelineAlertLambdaArn:
    Description: Arn of Server Pipeline Alert Lambda
    Value: !GetAtt [ ServerPipelineAlertLambda, Arn ]
    Export:
      Name:
        Fn::Join:
          - '-'
          - - !Ref AWS::StackName
            - ServerPipelineAlertLambdaArn

  WebPipelineAlertLambdaArn:
    Value: !GetAtt [ WebPipelineAlertLambda, Arn ]
    Export:
      Name:
        Fn::Join:
          - '-'
          - - !Ref AWS::StackName
            - WebPipelineAlertLambdaArn
