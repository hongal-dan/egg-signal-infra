AWSTemplateFormatVersion: 2010-09-09
Description: lambda stack for all lambdas

Parameters:
  ProjectName:
    Type: String
    Description: The name of the project

  EnvironmentStage:
    Type: String
    AllowedValues:
      - prod

  SecretsArn:
    Type: String

  SQSStack:
    Type: String

  OpenviduStack:
    Type: String

  NetworkStack:
    Type: String

  HostedZoneId:
    Type: String

  DynamoDBStack:
    Type: String

  RedisStack:
    Type: String

  SQSPollingLambdaS3Key:
    Type: String

  S3BucketName:
    Type: String

Resources:
  ServerPipelineAlertLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ServerPipelineAlertLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  ServerPipelineAlertLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: ServerPipelineAlertLambda
    Properties:
      LogGroupName:
        Fn::Join:
          - '-'
          - - ServerPipelineAlertLambda
            - !Ref EnvironmentStage
            - logs
      RetentionInDays: 7

  ServerPipelineAlertLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async function (event) {
              try {
                  const {time, detail} = JSON.parse(event.Records[0].Sns.Message);
                  
                  const webHookURL = process.env.SERVER_PIPELINE_WEBHOOK;
                  const envStage = process.env.ENVIRONMENT_STAGE;
                  
                  if (!webHookURL || !envStage) {
                      throw new Error("Webhook URL or Environment Stage is missing");
                  }
                  
                  const utcTime = new Date(time);
                  const koreaTime = new Date(utcTime.getTime() + (9 * 60 * 60 * 1000));
                  const options = {year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit',
                      second: '2-digit',
                      timeZoneName: 'short'};
                  const koreaTimeFormatted = new Intl.DateTimeFormat('ko-KR', options).format(koreaTime);
                  
                  const content = `⛳️ **AWS CodePipeline Notification-${envStage}**\n\n**Execution Status: ${detail.state}**\n\n**Time:** ${koreaTimeFormatted}`;
                  
                  const response = await fetch(webHookURL, {
                      method: "POST",
                      headers: {
                          "Content-Type": "application/json"
                      },
                      body: JSON.stringify({content})
                  });
                  
                  if (!response.ok) {
                      throw new Error(`Webhook request failed with status: ${response.status}`);
                  }
                  
                  return "Success";
              } catch (e) {
                  console.error(e);
                  throw e;
              }
          };

      Role: !GetAtt [ ServerPipelineAlertLambdaRole, Arn ]
      Environment:
        Variables:
          ENVIRONMENT_STAGE: !Ref EnvironmentStage
          SERVER_PIPELINE_WEBHOOK:
            Fn::Sub:
              - '{{resolve:secretsmanager:${SecretsArn}:SecretString:SERVER_PIPELINE_WEBHOOK}}'
              - SecretName: !Ref SecretsArn

  WebPipelineAlertLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: WebPipelineAlertLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  WebPipelineAlertLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: WebPipelineAlertLambda
    Properties:
      LogGroupName:
        Fn::Join:
          - '-'
          - - WebPipelineAlertLambda
            - !Ref EnvironmentStage
            - logs
      RetentionInDays: 7

  WebPipelineAlertLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async function (event) {
          try {
          const { time, detail } = JSON.parse(event.Records[0].Sns.Message);

          const webHookURL = process.env.WEB_PIPELINE_WEBHOOK;
          const envStage = process.env.ENVIRONMENT_STAGE;

          if (!webHookURL || !envStage) {
              throw new Error("Webhook URL or Environment Stage is missing");
              }

          const utcTime = new Date(time);
          const koreaTime = new Date(utcTime.getTime() + (9 * 60 * 60 * 1000));
          const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', timeZoneName: 'short' };
          const koreaTimeFormatted = new Intl.DateTimeFormat('ko-KR', options).format(koreaTime);

          const content = `⛳️ **AWS CodePipeline Notification-${envStage}**\n\n**Execution Status: ${detail.state}**\n\n**Time:** ${koreaTimeFormatted}`;

          const response = await fetch(webHookURL, {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ content })
              });

              if (!response.ok) {
                throw new Error(`Webhook request failed with status: ${response.status}`);
              }

              return "Success";
              } catch (e) {
                console.error(e);
                throw e;
              }
            };  

      Role: !GetAtt [ WebPipelineAlertLambdaRole, Arn ]
      Environment:
        Variables:
          ENVIRONMENT_STAGE: !Ref EnvironmentStage
          WEB_PIPELINE_WEBHOOK:
            Fn::Sub:
              - '{{resolve:secretsmanager:${SecretsArn}:SecretString:WEB_PIPELINE_WEBHOOK}}'
              - SecretName: !Ref SecretsArn

  SQSPollingLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: SQSPollingLambda
    Properties:
      LogGroupName:
        Fn::Join:
          - '-'
          - - SQSPollingLambda
            - !Ref EnvironmentStage
            - logs
      RetentionInDays: 7

  SQSPollingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "MyLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: "Allow"
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource:
                  - Fn::ImportValue:
                      Fn::Join:
                        - '-'
                        - - !Ref SQSStack
                          - OpenviduScalingQueueArn
              - Effect: "Allow"
                Action:
                  - "ec2:*"
                Resource:
                  - "*"
              - Effect: "Allow"
                Action:
                  - "cloudwatch:*"
                Resource:
                  - "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:*"
                Resource:
                  - "*"
              - Effect: "Allow"
                Action:
                  - "route53:*"
                Resource:
                  - "*"

  # https://medium.com/@devrick84/node-js-%EA%B8%B0%EB%B0%98%EC%9C%BC%EB%A1%9C-sqs-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-2433677715d3
  SQSPollingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref SQSPollingLambdaS3Key
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 20
      Role: !GetAtt [ SQSPollingLambdaRole, Arn ]
      Environment:
        Variables:
          INFRA_PIPELINE_WEBHOOK:
            Fn::Sub:
              - '{{resolve:secretsmanager:${SecretsArn}:SecretString:INFRA_PIPELINE_WEBHOOK}}'
              - SecretName: !Ref SecretsArn
          HostedZoneId: !Ref HostedZoneId
          subnetId:
            Fn::ImportValue:
              Fn::Join:
                - '-'
                - - !Ref NetworkStack
                  - PublicSubnet1
          securityGroupId:
            Fn::ImportValue:
              Fn::Join:
                - '-'
                - - !Ref OpenviduStack
                  - OpenviduSecurityGroup
          region: !Ref AWS::Region
          SQS_URL:
            Fn::ImportValue:
              Fn::Join:
                - '-'
                - - !Ref SQSStack
                  - OpenviduScalingQueue
          dynamoTable:
            Fn::ImportValue:
              Fn::Join:
                - '-'
                - - !Ref DynamoDBStack
                  - DynamoDBName
      VpcConfig:
        SecurityGroupIds:
          - !Ref PollingLambdaSecurityGroup
        SubnetIds:
          - Fn::ImportValue:
              Fn::Join:
                - '-'
                - - !Ref NetworkStack
                  - PrivateSubnet1
          - Fn::ImportValue:
              Fn::Join:
                - '-'
                - - !Ref NetworkStack
                  - PrivateSubnet2

  PollingLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: polling lambda sg.
      GroupName:
        Fn::Join:
          - '-'
          - - !Ref ProjectName
            - polling
            - lambda
      VpcId:
        Fn::ImportValue:
          Fn::Join:
            - '-'
            - - !Ref NetworkStack
              - VPC

  PollingLambdaToRedis:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: polling lambda to redis
      GroupId:
        Fn::ImportValue:
          Fn::Join:
            - '-'
            - - !Ref RedisStack
              - RedisContainerSecurityGroup
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      SourceSecurityGroupId: !Ref PollingLambdaSecurityGroup

  ExecutePollingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "ExecutePollingLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: "Allow"
                Action:
                  - "lambda:*"
                Resource:
                  - "*"

  ExecutePollingLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: ExecutePollingLambda
    Properties:
      LogGroupName:
        Fn::Join:
          - '-'
          - - ExecutePollingLambda
            - !Ref EnvironmentStage
            - logs
      RetentionInDays: 7

  ExecutePollingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const {LambdaClient, InvokeCommand} = require('@aws-sdk/client-lambda')
          
          exports.handler = async function (event) {
              const region = process.env.region;
              const lambdaClient = new LambdaClient({region})
              const sqsPollingLambdaName = process.env.SQSPollingLambdaName
              let callCount = 1
              const callPollingLambda = async () => {
                  const params = {
                      FunctionName: sqsPollingLambdaName,
                      InvocationType: "Event"
                  }
                  const command = new InvokeCommand(params)
                  
                  try {
                      await lambdaClient.send(command)
                      console.log('invoke lambda!', callCount)
                      callCount++
                  } catch (e) {
                      console.error('invoke lambda false!', e)
                  }
              }
              
              const wait = (time) => new Promise((resolve) => setTimeout(resolve, time));
              
              await wait(15000)
              await callPollingLambda() // 15 초
              
              await wait(15000)
              await callPollingLambda() // 30 초
              
              await wait(15000)
              await callPollingLambda() // 45 초
              
              await wait(15000)
              await callPollingLambda() // 60 초
          };
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 70
      Role: !GetAtt [ ExecutePollingLambdaRole, Arn ]
      Environment:
        Variables:
          SQSPollingLambdaName: !Ref SQSPollingLambda
          region: !Ref AWS::Region

Outputs:
  ServerPipelineAlertLambdaArn:
    Description: Arn of Server Pipeline Alert Lambda
    Value: !GetAtt [ ServerPipelineAlertLambda, Arn ]
    Export:
      Name:
        Fn::Join:
          - '-'
          - - !Ref AWS::StackName
            - ServerPipelineAlertLambdaArn

  WebPipelineAlertLambdaArn:
    Value: !GetAtt [ WebPipelineAlertLambda, Arn ]
    Export:
      Name:
        Fn::Join:
          - '-'
          - - !Ref AWS::StackName
            - WebPipelineAlertLambdaArn

  ExecutePollingLambdaArn:
    Value: !GetAtt [ ExecutePollingLambda, Arn ]
    Export:
      Name:
        Fn::Join:
          - '-'
          - - !Ref AWS::StackName
            - ExecutePollingLambdaArn
